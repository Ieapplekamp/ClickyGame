{"version":3,"sources":["components/Navbar.js","components/Pics.js","components/Shuffle.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","currentScore","highScore","Pictures","Matches","map","pic","key","name","src","source","alt","onClick","gameLoop","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","chosenArray","App","state","event","preventDefault","chosen","target","getAttribute","includes","setState","push","this","Pics","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8LAWeA,MATf,SAAgBC,GACZ,OACI,yBAAKC,UAAU,8BACX,0BAAMA,UAAU,MAAhB,mBACA,0BAAMA,UAAU,MAAhB,kBAAqCD,EAAME,aAA3C,kBAAwEF,EAAMG,aCW3EC,MAff,SAAkBJ,GACd,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACdD,EAAMK,QAAQC,KAAI,SAAAC,GAAG,OACd,yBAAKN,UAAU,WAAWO,IAAKD,EAAIE,MAC/B,yBAAKC,IAAKH,EAAII,OAAQV,UAAU,gBAAgBW,IAAKL,EAAIE,KAAMI,QAASb,EAAMc,kBCWvFC,EAnBD,SAAAC,GAIV,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,GCLPQ,EAAc,GA8DHC,E,2MA1DbC,MAAQ,CACNrB,UACAH,aAAc,EACdC,UAAW,G,EAIbW,SAAW,SAACa,GACVA,EAAMC,iBAEN,IAAIC,EAASF,EAAMG,OAAOC,aAAa,OAGnCP,EAAYQ,SAASH,IAEvB,EAAKI,SAAS,CAAE/B,aAAc,IAE9BsB,EAAa,KAGb,EAAKS,SAAS,CAAE/B,aAAc,EAAKwB,MAAMxB,aAAe,IAEpD,EAAKwB,MAAMxB,cAAgB,EAAKwB,MAAMvB,WACtC,EAAK8B,SAAS,CAAE9B,UAAW,EAAKuB,MAAMvB,UAAY,IAGtDqB,EAAYU,KAAKL,IAInB,EAAKI,SAAS,CAAE5B,QAASU,EAAQ,EAAKW,MAAMrB,Y,wEAI5C,OACE,6BACE,gCACE,kBAAC,EAAD,CACEH,aAAciC,KAAKT,MAAMxB,aACzBC,UAAYgC,KAAKT,MAAMvB,YAKzB,kBAACiC,EAAD,CACE/B,QAAS8B,KAAKT,MAAMrB,QACpBS,SAAYqB,KAAKrB,iB,GAhDXuB,IAAMC,WCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.113ff9bf.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navbar(props) {\n    return (\n        <nav className=\"navbar navbar-dark bg-dark\">\n            <span className=\"h3\">Catch Them All!</span>\n            <span className=\"h6\">Current Score: {props.currentScore} | High Score: {props.highScore}</span>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\n\nfunction Pictures(props) {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n            {props.Matches.map(pic => (\n                    <div className=\"col-sm-2\" key={pic.name}>\n                        <img src={pic.source} className=\"img-fluid p-2\" alt={pic.name} onClick={props.gameLoop}></img>\n                    </div>\n                ))}\n            </div>\n\n        </div>\n    )\n}\n\nexport default Pictures;","var shuffle = array => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n}\n\nexport default shuffle;","import React from 'react';\n// import { render } from 'react-dom';\n// import logo from './logo.svg';\n// import './App.css';\nimport Matches from \"./components/matchmatch.json\"\n\nimport Navbar from \"./components/Navbar\";\n// import Intro from \"./components/Intro\";\nimport Pics from \"./components/Pics\";\nimport shuffle from \"./components/Shuffle\"\n\nvar chosenArray = [];\n\nclass App extends React.Component {\n\n  state = {\n    Matches,\n    currentScore: 0,\n    highScore: 0\n  }\n\n  // gameLoop handles onclick events for images\n  gameLoop = (event) => {\n    event.preventDefault();\n    // Grabs the unique alt tag of the image clicked on\n    let chosen = event.target.getAttribute('alt');\n\n    // Checks if image has been saved in chosenArray\n    if (chosenArray.includes(chosen)){\n      // Resets score to 0 if already saved in chosenArray\n      this.setState({ currentScore: 0 });\n      // Empties chosen array to reset game\n      chosenArray =[];\n    } else {\n      // If not in chosenArray increments currentScore by 1\n      this.setState({ currentScore: this.state.currentScore + 1 });\n      // Checks the topScore and updates if currentScore is higher than top score\n      if (this.state.currentScore >= this.state.highScore) {\n          this.setState({ highScore: this.state.highScore + 1 });\n      };\n      // Pushes the selected array item to chosenArray\n      chosenArray.push(chosen);\n    };\n\n    // Shuffles the matches array\n    this.setState({ Matches: shuffle(this.state.Matches)});        \n  };\n  \n  render() {\n    return (\n      <div>\n        <header>\n          <Navbar\n            currentScore={this.state.currentScore}\n            highScore= {this.state.highScore}\n          />\n          {/* <Intro dismissable={true} title=\"Click any picture to begin!\">\n            Press on a picture to earn points, but try not press the same picture twice!\n          </Intro> */}\n          <Pics\n            Matches={this.state.Matches}\n            gameLoop = {this.gameLoop}\n          />\n        </header>\n      </div>\n      \n    );\n  }\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}