{"version":3,"sources":["components/images/pokeball.png","components/images/dawn.png","components/Navbar/Navbar.js","components/Intro/Intro.js","components/Pics/Pics.js","components/Shuffle.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","src","require","alt","currentScore","highScore","Intro","dismissable","state","show","setState","this","onClick","Component","Pictures","Matches","map","pic","index","key","name","source","event","gameLoop","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","MySwal","withReactContent","Swal","chosenArray","App","currentPokemon","find","poke","preventDefault","chosen","target","getAttribute","includes","fire","onOpen","clickConfirm","then","push","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18cd901f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.9d48ad1b.png\";","module.exports = __webpack_public_path__ + \"static/media/dawn.9685d7c2.png\";","import React from \"react\";\nimport \"../Navbar/Navbar.css\"\n\nfunction Navbar(props) {\n    return (\n        <header>\n            <img className=\"nav-img\" src={require('../images/pokeball.png')} alt=\"pokeball\"/>\n            <nav className=\"navbar nav-p\">\n                <span className=\"nav-p\">Catch'Em All!</span>\n                <span className=\"scores\">Caught: {props.currentScore} | High Score: {props.highScore}</span>\n            </nav>\n        </header>\n    )\n}\n\nexport default Navbar;","import React, { Component } from \"react\";\n\nimport \"../Intro/Intro.css\"\n\nclass Intro extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n          show: true,\n        };\n    }\n\n    dismissable = () => {\n\n        if (this.state.show === true) {\n          this.setState({ show: false });\n        } else {\n          this.setState({ show: true });\n        }\n\n    };\n\n    render() {\n        \n        return  this.state.show ? (\n            \n            <section className={`section-intro`}>\n                \n                <img className=\"intro-pic\" onClick={this.dismissable} src={require('../images/dawn.png')} alt=\"dawn pic\"></img>\n                <p className=\"intro-p\">\n                Click on a pokemon to earn points, but don't click on any more than once!\n                <br/><br/><br/>\n                Talk to Dawn to get started!\n                </p>\n                \n            </section>\n               \n        ) : null \n    }\n}\n\nexport default Intro;","import React from \"react\";\n\nimport \"../Pics/Pics.css\"\n\nfunction Pictures(props) {\n    return (\n        <div >\n            <div className=\"pokemans-container\">\n                {props.Matches.map((pic, index) => (\n                    <div className=\"\" key={pic.name}>\n                        <img src={pic.source} className=\"pokemans\" alt={pic.name} onClick={(event) =>  props.gameLoop(event, pic.name) }></img>\n                    </div>\n                ))}\n            </div>\n\n        </div>\n    )\n}\n\nexport default Pictures;","const shuffle = array => {\n  \n    let currentIndex = array.length, temporaryValue, randomIndex;\n    \n    while (0 !== currentIndex) {\n  \n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      \n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n}\n\nexport default shuffle;","import React from 'react';\nimport Matches from \"./components/matchmatch.json\"\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Intro from \"./components/Intro/Intro\";\nimport Pics from \"./components/Pics/Pics\";\nimport shuffle from \"./components/Shuffle\"\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n\nconst MySwal = withReactContent(Swal)\n\nlet chosenArray = [];\n\nclass App extends React.Component {\n\n\tstate = {\n\t\tMatches,\n    \tcurrentScore: 0,\n\t\thighScore: 0\n\t}\n\n\tgameLoop = (event, name) => {\n\t\tconst currentPokemon = this.state.Matches.find(poke => poke.name === name);\n\n    \tevent.preventDefault();\n\t\n\t\tlet chosen = event.target.getAttribute('alt');\n\n\t\tif (chosenArray.includes(chosen)) {\n\t\t\t\n\t\t\tMySwal.fire({\n\t\t\t\tonOpen: () => {\n\t\t\t\t  MySwal.clickConfirm()\n\t\t\t\t}\n\t\t\t}).then(() => {\n\t\t\t\t  return MySwal.fire(<p className=\"alert\">You already guessed <img src={currentPokemon.source} alt={chosen}></img> {chosen}!</p>)\n\t\t\t  })\n      \n\t\t\tthis.setState({ currentScore: 0 });\n\t\t\tchosenArray = [];\n      \n    \t} else {\n      \n    \t\tthis.setState({ currentScore: this.state.currentScore + 1 });\n\n    \t\tif (this.state.currentScore >= this.state.highScore) {\n        \t\tthis.setState({ highScore: this.state.highScore + 1 });\n    \t\t};\n      \n    \t\tchosenArray.push(chosen);\n    \t};\n\n\t\tthis.setState({ Matches: shuffle(this.state.Matches)});        \n\t};\n  \n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Navbar\n\t\t\t\t\tcurrentScore={this.state.currentScore}\n\t\t\t\t\thighScore= {this.state.highScore}\n\t\t\t\t/>\n\t\t\t\t<Intro/>\n\t\t\t\t<Pics\n\t\t\t\t\tMatches={this.state.Matches}\n\t\t\t\t\tgameLoop = {this.gameLoop}\n\t\t\t\t/>\n\t\t\t</div>\n      \n    \t);\n\t}\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}